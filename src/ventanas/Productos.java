/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import clases.Conexion;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mb
 */
public class Productos extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    public boolean actualizar = false;

    /**
     * Creates new form Productos
     */
    public Productos() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        actualizarTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_WallpaperHeader = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_reserva = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_buscar = new javax.swing.JTextField();
        jButton_limpiar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jButton_guardar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        cmb_buscar = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txt_precioVenta = new javax.swing.JTextField();
        cmb_medida = new javax.swing.JComboBox<>();
        cmb_categoria = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txt_codigo = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmb_ordenar = new javax.swing.JComboBox<>();
        jButton_Categorias = new javax.swing.JButton();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_WallpaperHeader.setBackground(new java.awt.Color(153, 153, 153));
        jLabel_WallpaperHeader.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel_WallpaperHeader.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_WallpaperHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_WallpaperHeader.setText("PRODUCTO");
        jLabel_WallpaperHeader.setOpaque(true);
        getContentPane().add(jLabel_WallpaperHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("LISTADO DE PRODUCTOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Nombre:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        txt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_nombreKeyReleased(evt);
            }
        });
        getContentPane().add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Medida:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Cantidad en reserva:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        txt_reserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_reservaActionPerformed(evt);
            }
        });
        txt_reserva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_reservaKeyReleased(evt);
            }
        });
        getContentPane().add(txt_reserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 170, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("CÃ³digo:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        txt_buscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });
        txt_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_buscarKeyReleased(evt);
            }
        });
        getContentPane().add(txt_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, 130, -1));

        jButton_limpiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_limpiar.setText("Limpiar");
        jButton_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 570, 170, -1));

        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 170, -1));

        jButton_guardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_guardar.setText("Guardar");
        jButton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 170, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("DETALLE DE PRODUCTO");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jTable_productos.setBackground(new java.awt.Color(255, 255, 255));
        jTable_productos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Cantidad", "Reserva", "Precio Venta", "Categoria", "Medida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable_productos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 130, 910, 500));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Buscar por:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, -1, -1));

        cmb_buscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmb_buscar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "Nombre" }));
        cmb_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(cmb_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, 160, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Precio venta:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));

        txt_precioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_precioVentaActionPerformed(evt);
            }
        });
        txt_precioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_precioVentaKeyReleased(evt);
            }
        });
        getContentPane().add(txt_precioVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 110, -1));

        cmb_medida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Unidad", "Litros", "Kilogramos" }));
        cmb_medida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_medidaItemStateChanged(evt);
            }
        });
        getContentPane().add(cmb_medida, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 170, -1));

        cmb_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Bebidas", "Comestibles", "Productos de limpieza" }));
        cmb_categoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_categoriaItemStateChanged(evt);
            }
        });
        cmb_categoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_categoriaActionPerformed(evt);
            }
        });
        getContentPane().add(cmb_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 170, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Categoria:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        txt_codigo.setEnabled(false);
        txt_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_codigoActionPerformed(evt);
            }
        });
        getContentPane().add(txt_codigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 170, -1));

        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });
        txt_cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_cantidadKeyReleased(evt);
            }
        });
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 170, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Cantidad:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Mostrar:");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, -1, -1));

        cmb_ordenar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmb_ordenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Mas vendidos", "Menos vendidos", "Precio mayor", "Precio menor", "En reserva" }));
        cmb_ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ordenarActionPerformed(evt);
            }
        });
        getContentPane().add(cmb_ordenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 93, 160, -1));

        jButton_Categorias.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_Categorias.setText("Categorias");
        jButton_Categorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CategoriasActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_Categorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 90, 170, -1));

        jLabel_Wallpaper.setBackground(new java.awt.Color(204, 204, 204));
        jLabel_Wallpaper.setOpaque(true);
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1189, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void txt_reservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_reservaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_reservaActionPerformed

    private void txt_precioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_precioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_precioVentaActionPerformed

    private void jButton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_guardarActionPerformed
        int categoria, medida = 0;
        String codigo, nombre, cantidad, precio_venta, reserva;

        codigo = txt_codigo.getText().trim();
        nombre = txt_nombre.getText().trim();
        categoria = cmb_categoria.getSelectedIndex() + 1;
        medida = cmb_medida.getSelectedIndex() + 1;
        cantidad = txt_cantidad.getText().trim();
        reserva = txt_reserva.getText().trim();
        precio_venta = txt_precioVenta.getText().trim();

        if (validaciones() == 0) {
            if (actualizar == true) {
                try {
                    Connection cn = Conexion.conectar();
                    PreparedStatement pst2 = cn.prepareStatement(
                            "UPDATE productos SET nombre=?, cantidad=?, reserva=?, precio_venta=?, id_categoria=?, medida=? WHERE id = '" + codigo + "'");
                 
                    pst2.setString(1, nombre.toUpperCase().charAt(0) + txt_nombre.getText().substring(1, txt_nombre.getText().length()).toLowerCase().trim());
                    pst2.setString(2, cantidad);
                    pst2.setString(3, reserva);
                    pst2.setString(4, precio_venta);
                    pst2.setInt(5, categoria);
                    pst2.setInt(6, medida);
                    pst2.executeUpdate();
                    cn.close();

                    Limpiar();
                    actualizar = false;
                    Clear_Table();
                    blanquear();
                    JOptionPane.showMessageDialog(null, "Actualizacion exitosa!");

                } catch (SQLException e) {
                    System.err.println("Error en registrar producto " + e);
                    JOptionPane.showMessageDialog(null, "Error al actualizar, contacte al administrador");
                }
            } else {
                try {
                    Connection cn = Conexion.conectar();
                    PreparedStatement pst2 = cn.prepareStatement(
                            "INSERT INTO `productos`( `nombre`, `cantidad`, `reserva`, `precio_venta`, `id_categoria`, `medida` ) VALUES (?,?,?,?,?,?)");
                   
                    pst2.setString(1, nombre.toUpperCase().charAt(0) + txt_nombre.getText().substring(1, txt_nombre.getText().length()).toLowerCase().trim());
                    pst2.setString(2, cantidad);
                    pst2.setString(3, reserva);
                    pst2.setString(4, precio_venta);
                    pst2.setInt(5, categoria);
                    pst2.setInt(6, medida);
                    pst2.executeUpdate();
                    cn.close();

                    actualizar = false;
                    Limpiar();
                    Clear_Table();
                    blanquear();
                    JOptionPane.showMessageDialog(null, "Registro exitoso!");

                } catch (SQLException e) {
                    System.err.println("Error en registrar usuario " + e);
                    JOptionPane.showMessageDialog(null, "Error al registrar, contacte al administrador");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe llenar todos los campos");
        }
    }//GEN-LAST:event_jButton_guardarActionPerformed

    public void blanquear() {
        txt_nombre.setBackground(Color.white);
        txt_cantidad.setBackground(Color.white);
        txt_reserva.setBackground(Color.white);
        txt_precioVenta.setBackground(Color.white);
        cmb_categoria.setBackground(Color.white);
        cmb_medida.setBackground(Color.white);
    }

    private void cmb_categoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_categoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_categoriaActionPerformed

    private void jButton_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_limpiarActionPerformed
        Limpiar();
    }//GEN-LAST:event_jButton_limpiarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed

        if (!txt_codigo.getText().trim().equals("")) {
            int confirmado = JOptionPane.showConfirmDialog(null, "Â¿Esta seguro?",
                    "Borrar", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);
            if (JOptionPane.OK_OPTION == confirmado) {
                try {
                    Connection cn2 = Conexion.conectar();

                    PreparedStatement pst2 = cn2.prepareStatement(
                            "DELETE FROM productos WHERE id = '" + txt_codigo.getText().trim() + "'");
                    pst2.executeUpdate();
                    cn2.close();
                    Clear_Table();
                    Limpiar();
                    blanquear();
                    actualizar = false;

                } catch (SQLException e) {
                    System.err.println("Error al borrar " + e);
                }
            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void cmb_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_buscarActionPerformed

    }//GEN-LAST:event_cmb_buscarActionPerformed

    private void txt_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_codigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_codigoActionPerformed

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    private void cmb_ordenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ordenarActionPerformed
        ordenarDatos(cmb_ordenar.getSelectedItem().toString());
    }//GEN-LAST:event_cmb_ordenarActionPerformed

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void txt_buscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_buscarKeyReleased
        buscarDatos(txt_buscar.getText());
    }//GEN-LAST:event_txt_buscarKeyReleased

    private void txt_nombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreKeyReleased
        validaciones();
    }//GEN-LAST:event_txt_nombreKeyReleased

    private void cmb_categoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_categoriaItemStateChanged
        validaciones();
    }//GEN-LAST:event_cmb_categoriaItemStateChanged

    private void cmb_medidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_medidaItemStateChanged
        validaciones();
    }//GEN-LAST:event_cmb_medidaItemStateChanged

    private void txt_cantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cantidadKeyReleased
        validaciones();
    }//GEN-LAST:event_txt_cantidadKeyReleased

    private void txt_reservaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_reservaKeyReleased
        validaciones();
    }//GEN-LAST:event_txt_reservaKeyReleased

    private void txt_precioVentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_precioVentaKeyReleased
        validaciones();
    }//GEN-LAST:event_txt_precioVentaKeyReleased

    private void jButton_CategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CategoriasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_CategoriasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Productos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmb_buscar;
    private javax.swing.JComboBox<String> cmb_categoria;
    private javax.swing.JComboBox<String> cmb_medida;
    private javax.swing.JComboBox<String> cmb_ordenar;
    private javax.swing.JButton jButton_Categorias;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_guardar;
    private javax.swing.JButton jButton_limpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_Wallpaper;
    private javax.swing.JLabel jLabel_WallpaperHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_codigo;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precioVenta;
    private javax.swing.JTextField txt_reserva;
    // End of variables declaration//GEN-END:variables

    public void Limpiar() {
        txt_codigo.setText("");
        txt_buscar.setText("");
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_reserva.setText("");
        txt_precioVenta.setText("");
        cmb_categoria.setSelectedIndex(0);
        cmb_medida.setSelectedIndex(0);
        blanquear();
        actualizar = false;
    }

    public void obtenerDatosTabla() {
        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

                int fila_point = jTable_productos.rowAtPoint(e.getPoint());
                if (fila_point > -1) {
                    String reserva = String.valueOf(model.getValueAt(fila_point, 3));
                    String cantidad = String.valueOf(model.getValueAt(fila_point, 2));
                    txt_codigo.setText(String.valueOf(model.getValueAt(fila_point, 0)));
                    txt_nombre.setText((String) model.getValueAt(fila_point, 1));
                    
                    
                    if ((String) model.getValueAt(fila_point, 6) == "Unidad") {
                        txt_reserva.setText(reserva);
                        txt_cantidad.setText(cantidad);
                        cmb_medida.setSelectedIndex(1);
                    } else {
                        txt_reserva.setText(reserva.substring(0, reserva.length() - 2));
                        txt_cantidad.setText(cantidad.substring(0, reserva.length() - 2));
                        if ((String) model.getValueAt(fila_point, 6) == "Litros") {
                            cmb_medida.setSelectedIndex(2);
                        }
                        if ((String) model.getValueAt(fila_point, 6) == "Kilogramos") {
                            cmb_medida.setSelectedIndex(3);
                        }
                    }
                    
                    txt_precioVenta.setText(String.valueOf(model.getValueAt(fila_point, 4)));
                    cmb_categoria.setSelectedIndex((int) model.getValueAt(fila_point, 5) - 1);
                   // cmb_medida.setSelectedIndex((int) model.getValueAt(fila_point, 6) - 1);
                    actualizar = true;
                }
            }
        });
    }

    public void actualizarTabla() {

        try {
            System.out.println("entro");
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT `id`, `nombre`, `cantidad`, `reserva`, `precio_venta`, `id_categoria`, `medida` FROM productos");
            ResultSet rs = pst.executeQuery();

            model = (DefaultTableModel) jTable_productos.getModel();
            jScrollPane1.setViewportView(jTable_productos);
            System.out.println(jTable_productos.getColumnCount());

            while (rs.next()) {
                Object[] fila = new Object[7];
                for (int i = 0; i < 7; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                if (fila[6].equals(2)) {
                    fila[6] = "Unidad";
                    fila[2] = fila[2].toString().substring(0, fila[2].toString().length() - 4);
                    fila[3] = fila[3].toString().substring(0, fila[3].toString().length() - 4);
                } else if (fila[6].equals(3)) {
                     fila[6] = "Litros";
                    fila[2] = fila[2] + " L";
                    fila[3] = fila[3] + " L";
                }else if (fila[6].equals(4)) {
                     fila[6] = "Kilogramos";
                    fila[2] = fila[2] + " K";
                    fila[3] = fila[3] + " K";
                }
                
                model.addRow(fila);
            }
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al llenar tabla." + e);
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion, contacte al administrador");
        }
        obtenerDatosTabla();
    }

    private void Clear_Table() {
        int filas = jTable_productos.getRowCount();
        for (int i = 0; filas > i; i++) {
            model.removeRow(0);
        }
        actualizarTabla();
    }

    public int validaciones() {
        int validacion = 0;
        if (txt_nombre.getText().equals("")) {
            txt_nombre.setBackground(Color.red);
            validacion++;
        } else {
            txt_nombre.setBackground(Color.white);
        }
        if (txt_cantidad.getText().equals("")) {
            txt_cantidad.setBackground(Color.red);
            validacion++;
        } else {
            txt_cantidad.setBackground(Color.white);
        }
        if (txt_reserva.getText().equals("")) {
            txt_reserva.setBackground(Color.red);
            validacion++;
        } else {
            txt_reserva.setBackground(Color.white);
        }

        if (txt_precioVenta.getText().equals("")) {
            txt_precioVenta.setBackground(Color.red);
            validacion++;
        } else {
            txt_precioVenta.setBackground(Color.white);
        }

        if (cmb_categoria.getSelectedIndex() == 0) {
            cmb_categoria.setBackground(Color.red);
            validacion++;
        } else {
            cmb_categoria.setBackground(Color.white);
        }
        if (cmb_medida.getSelectedIndex() == 0) {
            cmb_medida.setBackground(Color.red);
            validacion++;
        } else {
            cmb_medida.setBackground(Color.white);
        }
        return validacion;
    }

    public void ordenarDatos(String valor) {
        String[] titulos = {"Codigo", "Nombre", "Cantidad", "Reserva", "Precio venta", "Categoria", "Medida"};
        String[] registros = new String[7];

        String seleccion = cmb_ordenar.getSelectedItem().toString();
        DefaultTableModel modelo = new DefaultTableModel(null, titulos);

        String SQL = "";
        if (seleccion.equalsIgnoreCase("Todos")) {
            SQL = "SELECT * FROM productos ORDER BY id ASC";
        } else if (seleccion.equalsIgnoreCase("Mas vendidos")) {
            SQL = "SELECT p.id, p.nombre, p.cantidad, p.precio_venta, p.id_categoria, p.medida, p.reserva, SUM(s.cantidad) AS cantidad FROM salidas_detalle s JOIN productos p ON s.id_producto = p.id group by p.id order by SUM(s.cantidad) desc";
        } else if (seleccion.equalsIgnoreCase("Menos vendidos")) {
            SQL = "SELECT p.id, p.nombre, p.cantidad,  p.precio_venta, p.id_categoria, p.medida, p.reserva, SUM(s.cantidad) AS cantidad FROM salidas_detalle s JOIN productos p ON s.id_producto = p.id group by p.id order by SUM(s.cantidad) asc";
        } else if (seleccion.equalsIgnoreCase("Precio mayor")) {
            SQL = "SELECT * FROM productos ORDER BY precio_venta DESC";
        } else if (seleccion.equalsIgnoreCase("Precio menor")) {
            SQL = "SELECT * FROM productos ORDER BY precio_venta asc";
        } else if (seleccion.equalsIgnoreCase("En reserva")) {
            SQL = "SELECT * FROM productos WHERE cantidad < reserva";
        }

        try {
            Connection cn = Conexion.conectar();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(SQL);

            while (rs.next()) {
                registros[0]
                        = registros[1] = rs.getString("nombre");
                registros[2] = rs.getString("cantidad");
                registros[3] = rs.getString("reserva");
                registros[4] = rs.getString("precio_venta");
                registros[5] = rs.getString("id_categoria");
                registros[6] = rs.getString("medida");
                modelo.addRow(registros);
            }

            jTable_productos.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al filtrar: " + e);
        }

    }

    public void buscarDatos(String valor) {
        String[] titulos = {"Codigo", "Nombre", "Cantidad", "Reserva", "Precio venta", "Categoria", "Medida"};
        String[] registros = new String[8];

        String seleccion = cmb_buscar.getSelectedItem().toString();
        DefaultTableModel modelo = new DefaultTableModel(null, titulos);
        String SQL = "";
        if (seleccion.equalsIgnoreCase("Codigo")) {
            SQL = "SELECT * FROM productos WHERE id like '%" + valor + "%'";
        } else if (seleccion.equalsIgnoreCase("Nombre")) {
            System.out.println("asdasdasd");
            SQL = "SELECT * FROM productos WHERE nombre like '%" + valor + "%'";
        }

        try {
            Connection cn = Conexion.conectar();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(SQL);

            while (rs.next()) {
                registros[0] = rs.getString("id");
                registros[1] = rs.getString("nombre");
                registros[2] = rs.getString("cantidad");
                registros[3] = rs.getString("reserva");
                registros[4] = rs.getString("precio_venta");
                registros[5] = rs.getString("id_categoria");
                registros[6] = rs.getString("medida");
                modelo.addRow(registros);
            }
            jTable_productos.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al filtrar: " + e);
        }

    }

}
